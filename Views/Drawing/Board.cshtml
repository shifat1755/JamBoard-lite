<!DOCTYPE html>
<html>
<head>
    <title>Fabric.js Pencil Drawing with Undo/Redo</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.2.4/fabric.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.3/signalr.min.js"></script>
    <style>
        #toolbar {
            margin: 10px;
        }

            #toolbar button {
                margin-right: 5px;
            }
    </style>
</head>
<body>
    <canvas id="drawingCanvas" width="1200" height="600" style="border:1px solid #000;"></canvas>
    <div id="toolbar">
        <button id="undoBtn">Undo</button>
        <button id="redoBtn">Redo</button>
        <label for="colorPicker">Brush Color:</label>
        <input type="color" id="colorPicker" value="#000000">
        <label for="brushSize">Brush Size:</label>
        <input type="range" id="brushSize" min="1" max="100" value="5">
    </div>
    <script>
        // Connect to SignalR Hub
        var drawingId = window.location.pathname.split('/').pop();
        var connection = new signalR.HubConnectionBuilder().withUrl(`/Board?drawingId=${drawingId}`).build();

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        var canvas = new fabric.Canvas('drawingCanvas');
        canvas.isDrawingMode = true;
        canvas.freeDrawingBrush.color = "black";
        canvas.freeDrawingBrush.width = 5;

        var otherUsersState = {};
        var myStates = [];
        var undoneState = [];

        connection.on('UserJoined', function (connectionId) {
            otherUsersState[connectionId] = [];
        });

        connection.on("ReceiveData", function (connectionId, data) {
            otherUsersState[connectionId].push(data);
            reRender();
        });

        connection.on("Undo", function (connectionId) {
            otherUsersState[connectionId].pop();
            reRender();
        });

        function sendDrawingData(data) {
            connection.invoke("UserActivity", data)
                .catch(err => console.error(err.toString()));
        }

        function reRender() {
            canvas.clear();
            var allState = myStates.concat(...Object.values(otherUsersState));
            allState.forEach(function (path) {
                canvas.add(path);
            });
            canvas.renderAll();
        }

        function addState(path) {
            myStates.push(path);
            reRender();
            sendDrawingData(path);
        }

        function undo() {
            if (myStates.length > 0) {
                const action = myStates.pop();
                undoneState.push(action);
                reRender();
                connection.invoke("Undo");
            }
        }

        function redo() {
            if (undoneState.length > 0) {
                var data = undoneState.pop();
                myStates.push(data);
                sendDrawingData(data);
                reRender();
            }
        }

        canvas.on('path:created', function (event) {
            const path = event.path;
            addState(path);
        });

        document.getElementById('colorPicker').addEventListener('input', function (e) {
            canvas.freeDrawingBrush.color = e.target.value;
        });

        document.getElementById('brushSize').addEventListener('input', function (e) {
            canvas.freeDrawingBrush.width = parseInt(e.target.value, 10) || 1;
        });

        document.getElementById('undoBtn').addEventListener('click', function () {
            undo();
        });

        document.getElementById('redoBtn').addEventListener('click', function () {
            redo();
        });
    </script>
</body>
</html>
