@using System.Text;
@using Newtonsoft.Json;


<script src="~/lib/microsoft-signalr/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.2.4/fabric.min.js"></script>
<style>
    #toolbar {
        margin: 10px;
    }

        #toolbar button {
            margin-right: 5px;
        }
</style>
<div>
<h2>Title</h2>
    <canvas id="drawingCanvas" width="1200" height="600" style="border:1px solid #000;"></canvas>
<div id="toolbar">
    <button id="undoBtn" onclick="undoState()">Undo</button>
    <button id="redoBtn" onclick="redoState()">Redo</button>
    <label for="colorPicker">Brush Color:</label>
    <input type="color" id="colorPicker" value="#000000">
    <label for="brushSize">Brush Size:</label>
    <input type="range" id="brushSize" min="1" max="100" value="5">
</div>
</div>

<script>
    var ConnectionID;
    var pData = @Html.Raw(JsonConvert.SerializeObject(ViewData["prevData"]));
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const did = urlParams.get('name');

    var connection = new signalR.HubConnectionBuilder().withUrl(`/boardConnection?drawingId=${did}`).build();

    connection.start()
        .then(function () {
            ConnectionID = connection.connectionId;
            console.log("Connection ID:", ConnectionID);
        })
        .catch(function (err) {
            console.error(err.toString());
        });


    var canvas = new fabric.Canvas('drawingCanvas');
    canvas.isDrawingMode = true;
    canvas.freeDrawingBrush.color = "black";
    canvas.freeDrawingBrush.width = 5;

    var AllUsersState = {};
    var myUndoneStates = [];

    connection.on('UserJoined', function (connectionId) {
        AllUsersState[connectionId] = []
        console.log("joined",connectionId)
    });

    connection.on("ReceiveData", function (connectionId,data) {
        console.log("received", connectionId, data)
        var pathData = toFabricPath(data)
        console.log("Restored received Path:", pathData);
        if (!(connectionId in AllUsersState)) {
            AllUsersState[connectionId] = [];
        }
        AllUsersState[connectionId].push(pathData);
        console.log("AllUsersState", connectionId, AllUsersState)

        reRender();
    });

    connection.on("Undo", function (connectionId) {
        AllUsersState[connectionId].pop();
        reRender();
    });

    connection.on("dbData", function (data) {
        console.log("inisde client Db receiver")
        AllUsersState["db"] = [];
        data.forEach(function (item) {
            var pathData = toFabricPath(item)
            AllUsersState["db"].push(pathData);
        });
        reRender();
    })

    connection.on("boardRequest", function (toConnection) {
        Object.keys(AllUsersState).forEach(function (fromId) {
            if (fromId === toConnection) {return;}
            AllUsersState[fromId].forEach(function (path) {
                const stringifiedPath = JSON.stringify(path.toObject());
                connection.invoke("BoardData", toConnection, fromId, stringifiedPath)
                    .catch(err => {
                        console.error("Failed to invoke BoardData:", err.toString());
                    });
            });
        });
    });


    function sendDrawingData(data) {
        connection.invoke("AddState", data)
            .catch(err => console.error(err.toString()));
    }

    function reRender() {
        canvas.clear();
        var allState = Object.values(AllUsersState).flat();
        allState.forEach(function (path) {
            canvas.add(path);
        });
    }

    function addState(path) {
        if (!(ConnectionID in AllUsersState)){
            AllUsersState[ConnectionID] = [];
        }
        AllUsersState[ConnectionID].push(path);
        canvas.add(path);
        const stringifiedPath = JSON.stringify(path.toObject());
        console.log("Stringified Path:", stringifiedPath);
        sendDrawingData(stringifiedPath)
    }

    function undoState() {
        if (!(ConnectionID in AllUsersState)) { return; }
        if (AllUsersState[ConnectionID].length > 0) {
            var state = AllUsersState[ConnectionID].pop();
            console.log(state)
            myUndoneStates.push(state);
            const stringifiedPath = JSON.stringify(state.toObject());
            connection.invoke("Undo", stringifiedPath);
            reRender();
        }
    }


    function redoState() {
        if (!(ConnectionID in AllUsersState)) { return; }
        if (myUndoneStates.length > 0) {
            var data = myUndoneStates.pop();
            AllUsersState[ConnectionID].push(data);
            reRender();
            const stringifiedPath = JSON.stringify(data.toObject());

            sendDrawingData(stringifiedPath);
        }
    }

    canvas.on('path:created', function (event) {
        const path = event.path;
        addState(path);
    });


    document.getElementById('colorPicker').addEventListener('input', function (e) {
        canvas.freeDrawingBrush.color = e.target.value;
    });

    document.getElementById('brushSize').addEventListener('input', function (e) {
        canvas.freeDrawingBrush.width = parseInt(e.target.value, 10) || 1;
    });

    function toFabricPath(data) {
        const parsedPathObject = JSON.parse(data);
        const restoredPath = new fabric.Path(parsedPathObject.path, parsedPathObject);
        return restoredPath;
    }
</script>
